<html lang=ru><head><meta http-equiv=Content-Type content="text/html; charset=windows-1251"><title>uFMOD</title></head><body style='margin:0'><table border=0 cellpadding=0 cellspacing=0 width=100%><tr bgcolor=#E7E7E7 align=center><td height=20 style='color:#708090;font-size:9pt;font-family:Arial,Aerial'>[ <a href='en.htm'>English</a> | <a href='es.htm'>Espa&#241;ol</a> | Pycc&#954;u&#250; ]<tr bgcolor=#708090><td height=1></table><center><h2 style='font-size:14pt;font-family:Arial,Aerial'>&#956;FMOD v1.25 для Linux (i386)</h2></center><div style='font-size:10pt;font-family:Arial,Aerial;text-align:justify;margin:8'><p>uFMOD - это компактная, шустрая, надёжная, мультиплатформенная библиотека для качественного воспроизведения аудио в формате XM, разработанная полностью на ассемблере. XM может храниться в отдельном файле или предварительно загружен в память. Поддерживаются также битые и не совсем стандартные файлы. Библиотека распространяется с открытым исходным кодом и примерами для следующих компиляторов: GCC, Tcl/Tk, PureBasic, BlitzMax, FreeBASIC, FreePascal, FASM, NASM и GAS.<p><ul><li><a href='#1'>OSS, ALSA или OpenAL?</a><li><a href='#2'>Утилиты</a><ul><li><a href='#21'>XMStrip</a><li><a href='#22'>Eff</a></ul><li><a href='#3'>Компиляция библиотеки</a><li><a href='#4'>Примеры</a><li><a href='#5'>Дополнительное уменьшение размера</a><li><a href='#6'>ЧаВо</a><li><a href='#7'>Благодарности</a></ul><p>&nbsp;<br><a name='1'><b>OSS, ALSA или OpenAL?</b></a><p>uFMOD для Linux поддерживает <a href='http://www.opensound.com/'>OSS</a>, <a href='http://www.alsa-project.org/'>ALSA</a> и <a href='http://www.openal.org/'>OpenAL</a>. Все 3 подсистемы имеют свои плюсы и минусы. ALSA является встроенной по умолчанию аудио системой в большинстве дистрибутивов Linux на базе ядра 2.6.x. С другой стороны, OSS поддерживается в дистрибутивах на базе 2.4.x и старше (такие уже пора относить к разряду анахронизмов). Поэтому многие считают OSS устаревшей системой, а ALSA - её достойной заменой. На самом деле всё сложнее, так как существуют коммерческие драйверы OSS для узкоспециализированных приложений. Некоторые звуковые карты поддерживаются не полностью или совсем не поддерживаются в ALSA, а в OSS их вполне можно использовать. Обратное тоже верно. В настоящее время, ALSA поддерживается только в Linux, тогда как OSS доступна и на многих других Unix-подобных системах, например: FreeBSD, Solaris и т.д. ALSA и OpenAL навязывают использование динамической библиотеки (libasound.so и libopenal.so соответственно), а это затрудняет или даже делает невозможной разработку статических приложений, без лишних зависимостей. Среди плюсов ALSA можно выделить высокую производительность на современных звуковых карточках, поддержку плагинов (виртуальных звуковых устройств), полную эмуляцию драйверов OSS для поддержки приложений, использующих OSS, и т.д. OpenAL кроссплатформенна (доступны версии для Windows, Linux, Macintosh и <a href='http://www.openal.org/platforms.html'>т.д.</a>), поддерживает аппаратное ускорение эффектов 3D-окружения, что очень полезно для разработчиков игр. Для разработки приложений с использованием OpenAL необходимо скачать и установить соответствующий пакет, если он у Вас ещё не установлен. Если вы не уверены какую версию uFMOD выбрать для своего проекта, скорее всего вам больше подойдёт стандартная версия с OSS, так как она проще в использовании: для воспроизведения звука достаточно добавить всего лишь пару строчек кода. Версия с OSS для Linux полностью совместима на уровне исходных кодов с версиями WINMM для Win32 и OSS для Unix/BSD. Это позволяет писать мультиплатформенные приложения! Для приложений, ориентирующихся исключительно под Linux на ядре 2.6.x и новее, имеет смысл использовать ALSA. OpenAL также годится для мультиплатформенных проектов, в особенности в области игр.<p>&nbsp;<br><a name='2'><b>Утилиты</b></a><p>В комплект включена пара бесплатных утилит для использования совместно с uFMOD: XMStrip и Eff. Обе утилиты заточены под консольный терминал. Графический интерфейс (GUI) доступен средствами Tcl/Tk. <i>effgui</i> и <i>xmstripgui</i> являются графическими расширениями <i>eff</i> и <i>xmstrip</i> соответственно. Обычно, для запуска скрипта Tcl/Tk в интерпретаторе, достаточно дважды щёлкнуть по файлу скрипта в графическом окружении, если Tcl/Tk установлен и настроен в системе. В некоторых конфигурациях популярных дистрибутивов требуется ввод команды <code>wish ./&lt;имя_скрипта&gt;</code> в эмуляторе терминала или выполнение более сложных действий для запуска нужного скрипта. Режим GUI интуитивно понятен. Давайте рассмотрим консольный интерфейс.<p><table border=0 cellpadding=0 cellspacing=0 bgcolor=#708090 style='font-size:9pt;font-family:Arial,Aerial'><tr><td colspan=3 height=1><tr height=18><td style='color:#E7E7E7'><b>&nbsp;SVN&nbsp;</b><td bgcolor=#E7E7E7>&nbsp;<a href='http://ufmod.svn.sourceforge.net/viewvc/ufmod/Linux'>Исходники доступны через SVN</a>&nbsp;<td width=1><tr><td colspan=3 height=1></table><p><a name='21'><b><i>XMStrip</i></b></a> обрабатывает заданный XM файл с целью уменьшения размера, без потери качества звучания. В процессе обработки, XMStrip удаляет неиспользующиеся инструменты и партитуры, вырезает комментарии и перепаковывает внутренние структуры файла для уменьшения размера и повышения скорости загрузки. Для начала, откроем терминал и введём <code>./xmstrip</code> чтобы получить следующее сообщение:<p><center><table border=0 cellpadding=8><tr bgcolor=#000000><td><pre><font color=#FFFFFF> USAGE:  xmstrip [options] file [output]
         file   - input file name.
         output - optional output file name.          
 options:
  -c - clean only (don't strip)
 When [output] is not specified, XMSTRIP
 attempts to overwrite the input. If file
 name contains spaces, enclose it in "".</font></td></tr></table></center><p>Если имя сохраняемого файла не указано, XMStrip перезапишет заданный файл. Если имя файла содержит пробелы, его необходимо заключить в кавычки ("").<p>Имейте в виду, что другие проигрыватели XM файлов, возможно, откажутся воспроизводить файл, обработанный XMStrip. Опция <b>-c</b> предусмотрена для восстановления таких файлов или обработки обычных XM файлов, которые планируется проигрывать не только в uFMOD.<p><a name='22'><b><i>Eff</i></b></a> предназначается для опытных кодеров, желающих сэкономить каждый байт в своих приложениях. Для этого нужно выделить только те функции uFMOD, которые действительно будут использованы в целевом приложении, перекомпилировать библиотеку и получить наименьший возможный размер. Вот, что выдаёт <code>./eff</code> :<p><center><table border=0 cellpadding=8><tr bgcolor=#000000><td><pre><font color=#FFFFFF> USAGE:  eff [options] file
         file - input file name
         options:
          /Dm - generate a masm32/tasm dump
          /Dd - generate a Pascal (Delphi) dump
          /Dc - generate a C/C++ dump
          /Ds - generate an RCDATA resource dump
          /Di - disable infoAPI:
                    uFMOD_GetStats, uFMOD_GetRowOrder,
                    uFMOD_GetTitle and uFMOD_GetTime
          /Dp - disable uFMOD_Pause, uFMOD_Resume
                    and XM_SUSPENDED
          /Dv - disable volume control
          /Dj - disable Jump2Pattern
          /Df - disable loading XM from file
          /Dl - disable XM_NOLOOP
          /M  - mark & clear unused chunks of
                data in a masm32/tasm compatible dump</font></td></tr></table></center><p>Последний параметр - имя XM файла, на использование которого ориентируются следующие параметры оптимизации:<ul><li><b>/Dm</b> создаёт текстовый дамп данного XM файла для использования в исходнике на MASM32 или TASM. Ни тот, ни другой не используются в Linux, но синтаксис совместим с FASM и NASM. Вместе с тем, и FASM и NASM позволяют включать в исполнимый образ содержимое произвольных файлов напрямую. Поэтому, данная опция полезна только при использовании ключа <b>/M</b> (см. ниже).<li><b>/Dd</b> и <b>/Dc</b> создают подобные дампы, но для Pascal (Delphi, Kylix, FreePascal) или C/C++ соответственно.<li><b>/Ds</b> создаёт аналогичный дамп в формате RCDATA, который используется в скриптах описания ресурсов (*.rc). Не все компиляторы ресурсов поддерживают синтаксис Microsoft: <code>id RCDATA "имя_файла"</code>. В Linux данная опция бесполезна.<li>Ключ <b>/Di</b> отключает все информативные функции: uFMOD_GetStats, uFMOD_GetRowOrder, uFMOD_GetTitle и uFMOD_GetTime. Это даёт выигрыш не только в размере библиотеки, но и в скорости.<li><b>/Dp</b> отключает функции uFMOD_Pause и uFMOD_Resume и поддержку флага XM_SUSPENDED. Если Вы не собираетесь использовать pause/resume, включите этот ключ в параметры командной строки для экономии ещё нескольких байт.<li>uFMOD_SetVolume увеличивает не только размер библиотеки, но ещё и загрузку CPU. Добавьте ключ <b>/Dv</b>, чтобы отключить эту функцию и сэкономить несколько байт и тактов ;)<li><b>/Dj</b> отключает функцию Jump2Pattern. Данная функция предназначена для очень специфичных задач и, поэтому, используется редко. В разделе <a href='#5'>"Дополнительное уменьшение размера"</a> подробно описано использование Jump2Pattern.<li>Вам не нужна поддержка загрузки файлов - только проигрывание из памяти? Тогда, не задумываясь, включайте <b>/Df</b> для дополнительного уменьшения размера.<li>Ключ <b>/Dl</b> (маленькая L) отключает поддержку флага XM_NOLOOP (и, следовательно, благотворно влияет на размер и скорость).<li>Совсем "экстремальный" вид оптимизации предусмотрен специально для ассемблерщиков. В каждом XM файле есть цепочки байт, которые зарезервированы на будущее, или просто содержат комментарии или любую другую, не имеющую отношения к проигрыванию, информацию. <b>/M</b> выделяет эти "дыры", предоставляя возможность заполнить их полезной информацией (разместить данные или даже код).</ul>Eff создаёт файл EFF.INC и, согласно заданным опциям, текстовый дамп. Рассмотрим несколько одинаковых примеров (все верны):<p><b>eff /Dmpvjfl /M file.xm<br>eff /M /Dm /Dp /Dv /Dj /Df /Dl file.xm<br>eff -M -Dmpvjfl file.xm</b><p>Любой из предыдущих примеров создаст ассемблерный дамп, выделит "дыры" и предварительно заполнит их нулями. Файл EFF.INC содержит список эффектов XM, которые действительно используются в заданном файле, и некоторые дополнительные флаги для отключения pause/resume, регулятора громкости, Jump2Pattern, поддержки файлов и XM_NOLOOP. Поместите этот новый EFF.INC в ufmodlib/src/ и перекомпилируйте библиотеку (в следующем разделе освещены некоторые вопросы касающиеся компиляции исходников библиотеки). Теперь у Вас имеется свой собственный оптимизированный билд uFMOD, но имейте в виду, что в этом билде включены не все эффекты XM. Поэтому, не следует использовать его для проигрывания других XM файлов, отличных от обработанного утилитой Eff!<p>&nbsp;<br><a name='3'><b>Компиляция библиотеки</b></a><p>Необходимость компиляции исходников библиотеки uFMOD возникает при использовании утилиты <a href='#22'>Eff</a>, а также для включения особых режимов и опций, которые отключены в сборке по умолчанию (см. таблицу <b>Опции</b> ниже). Для тех, кто хочет попрактиковаться в ассемблере и/или разобраться в библиотеке на самом низком уровне, и предназначен данный раздел.<p>Исходники uFMOD расположены в ufmodlib/src/:<ul><li><span style='color:#800080'><b>eff.inc</b></span> - этот заголовочный файл создаётся утилитой <a href='#22'>Eff</a>. Не рекомендуется редактировать данный файл вручную! Настоящие кодеры не обращают внимания на подобные предупреждения, но всё же... :)<li>В <span style='color:#008080'><b>core.asm</b></span> находится большая часть исходного кода uFMOD. Этот самый файл присутствует во всех дистрибутивах библиотеки: Linux, Unix/BSD, Win32 и KolibriOS. Загрузка XM-файла, смешивание каналов, наложение эффектов и многие другие общие для всех дистрибутивов алгоритмы реализованы в данном файле.<li><span style='color:#008080'><b>ufmod.asm</b></span> содержит платформозависимые процедуры: файловый В/В, создание потоков и т.д. Поэтому, содержимое данного файла различается в дистрибутивах для разных ОСей.<li><span style='color:#008080'><b>fasm.asm</b></span> хранит определения констант, структур и т.д. под синтаксис Flat Assembler (FASM). Этот файл позволяет собирать различные версии библиотеки с помощью FASM.<li><span style='color:#008080'><b>nasm.asm</b></span> хранит определения констант, структур и т.д. под синтаксис Netwide Assembler (NASM). Этот файл позволяет собирать различные версии библиотеки с помощью NASM.<li><span style='color:#000080'><b>ufmod.desc</b></span>, <span style='color:#000080'><b>oalufmod.desc</b></span> и <span style='color:#000080'><b>alsaufmod.desc</b></span> содержат описания библиотек для PureBasic. PureBasic Library SDK использует эти файлы при компиляции библиотек uFMOD в формате PureLibrary.</ul>Следующим после внесения изменений в исходники шагом является компиляция. Выберите один из makefile'ов в ufmodlib/, в зависимости от целевого компилятора, для которого нужно собрать библиотеку. Следующая таблица поможет сделать выбор:<p><table border=0 cellpadding=4 cellspacing=2 style='font-size:10pt;font-family:Arial,Aerial'><tr bgcolor=#708090 style='color:#E7E7E7;font-weight:bold'><td>Makefile<td>Компилятор(ы)<td>Комментарии<tr valign=top><td>Makefile<td>GCC, Tcl/Tk, FreeBASIC, FreePascal, FASM, NASM, GAS<td>Пользователи FreePascal должны установить значение LIB в опции UF_FMT перед сборкой. Все остальные должны установить значение OBJ.<br><a href='http://sourceforge.net/projects/fbc/'>FreeBASIC</a>, <a href='http://sourceforge.net/projects/freepascal/'>FreePascal</a>, <a href='http://fasm.sourceforge.net/'>FASM</a> и <a href='http://nasm.sourceforge.net/'>NASM</a> также являются проектами SourceForge!<tr bgcolor=#E7E7E7><td>MakePB<td>PureBasic<td><tr><td>MakeBMod<td>BlitzMax<tr bgcolor=#E7E7E7 valign=top><td>make.bat<td>GCC, Tcl/Tk, FreeBASIC, FreePascal, FASM, NASM, GAS<td>Это батник, которым можно собрать uFMOD для Linux из Win32.</table><p>Теперь откройте выбранный makefile или батник в текстовом редакторе. Всё, что находится между следующих строк:<pre>*** CONFIG START</pre>и<pre>*** CONFIG END</pre>подлежит настройке. При кросс-компиляции из Win32 требуется дополнительный шаг (если Вы собираете библиотеку в Linux, пропустите следующий блок):<div style='margin:8;padding:12;border-style:dotted;border-width:2;border-color:#708090;background-color:#E7E7E7'>Обратите внимание на секцию <code>Pathes</code>. Там есть такая опция:<pre>SET UF_NASM=\nasm</pre>Если у Вас установлен NASM, удостоверьтесь, что путь в данной опции указывает точно туда, где находится nasmw.exe. Допустим, NASM установлен в <code>D:\TOOLS\NASM</code>. В таком случае, необходимо скорректировать опцию следующим образом:<pre>SET UF_NASM=D:\TOOLS\NASM</pre>Не все пути необходимы для успешной компиляции. Например, если Вы намерены использовать FASM, не нужно настраивать UF_NASM. Путь в опции UF_ARCH содержит имя файла:<pre>SET UF_ARCH=ar</pre>ar.exe должен находиться в одном из каталогов в списке переменной окружения PATH. Если это не так, необходимо указать полный путь. Предположим, ar.exe находится в <code>C:\Program files\BlitzMax\bin\ar.exe</code>. Тогда опцию UF_ARCH нужно определить следующим образом:<pre>SET UF_ARCH=C:\Program files\BlitzMax\bin\ar.exe</pre>Проверьте правильность всех путей, необходимых для компиляции.</div>Теперь настройте параметры конфигурации, согласно следующей таблице:<p><table border=0 cellpadding=4 cellspacing=2 style='font-size:10pt;font-family:Arial,Aerial'><tr bgcolor=#708090 style='color:#E7E7E7;font-weight:bold'><td>Опция<sup>*</sup><td>Описание<td width=200>Значения<sup>*</sup><tr valign=top><td>UF_RAMP<td>Данная опция позволяет настроить механизм интерполяции, который предназначен для погашения щелчков - резкие перепады амплитуды сигнала, характерные для трекерской музыки. С другой стороны, интерполяция вносит искажение в высокочастотные спектральные составляющие сигнала, что иногда бывает заметно. STRONG - это значение по умолчанию, рекомендуемое для большинства приложений. В данном режиме миксер сглаживает резкие перепады амплитуды, применяя линейную 32-ступенчатую интерполяцию. WEAK накладывает лишь 16 ступеней - этот режим менее эффективен, чем STRONG, но зато вероятность деградации сигнала в этом режиме ниже. NONE вообще отключает интерполяцию. Без сглаживания не будет и деградации, но большинство композиций без сглаживания будет звучать заметно хуже из-за наложения щелчков. Особым образом сбалансированные композиции без сглаживания могут звучать лучше.<td>NONE, WEAK, STRONG<tr bgcolor=#E7E7E7 valign=top><td>UF_FREQ<td>Частота дискретизации (в Гц). 44100 было значением по умолчанию до версии 1.20. Данное значение полезно только для совместимости с системами Linux, установленными поверх эмулятора QEMU. При использовании значения 48КГц воспроизводится более чистый звук на большинстве звуковых карточек и потребляется меньше системных ресурсов. Поэтому, 48000 является новым значением по умолчанию, рекомендуемым для большинства приложений. 22050 предусмотрено для тех, кто ещё помнит славные деньки Amiga.<td>22050, 44100, 48000<tr valign=top><td>UF_FMT<td>Создать статическую библиотеку (lib*.a) или просто обьектный файл (*.o). Примеры для FreePascal используют статические библиотеки, тогда как все остальные примеры рассчитаны на обьектные файлы.<td>OBJ, LIB<tr bgcolor=#E7E7E7 valign=top><td>UF_ASM<td>Ассемблер. Да, uFMOD можно собирать либо FASM'ом, либо NASM'ом - выбирайте тот, который больше нравится :)<td>FASM, NASM<tr valign=top><td>UF_MODE<td>NORMAL - это значение по умолчанию. Ничего особенного. UNSAFE отключает проверку правильности формата XM перед загрузкой композиции. Если Вы уверены, что все композиции, которые будут проигрываться в вашем приложении, корректны (правильность формата XM-файла можно проверить в Eff или XMStrip), можете пересобрать библиотеку в режиме UNSAFE, чтобы выйграть в размере и скорости загрузки. Имейте в виду, что загрузка неправильного XM-файла в режиме UNSAFE может привести к краху! В режиме BENCHMARK доступен счётчик производительности, который хранит точное количество тактов, которое уходит на синтез чуть более 21 мс звука при частоте в 48 КГц. Данный режим предназначен для сравнения производительности различных версий библиотеки. Режим BENCHMARK доступен только в C, FASM, NASM и GAS.<td>NORMAL, UNSAFE, BENCHMARK<tr bgcolor=#E7E7E7><td colspan=3 height=2></table><span style='font-size:8pt'>* Каждый makefile использует подмножество данных опций и значений.</span><p>При использовании Makefile, достаточно запустить GNU Make для компиляции библиотеки: <b>make</b>. При использовании файла с нестандартным именем, его следует указать в параметрах командной строки: <b>make -f Makefile</b>. Запустите makefile или батник, чтобы собрать библиотеку. Вот и всё!<p>&nbsp;<br><a name='4'><b>Примеры</b></a><p>В каждом из каталогов представлены примеры с использованием всех трёх версий библиотеки: OSS, ALSA и OpenAL. Некоторые примеры сопровождаются откомпилированными экзешниками, чтобы показать минимальный размер, характерный для данного компилятора. Заметьте, что экзешники представлены без сжатия.<div style='margin:8;padding:12;border-style:dotted;border-width:2;border-color:#708090;background-color:#E7E7E7'><span style='color:#708090'><b>Если Вы намериваетесь использовать OpenAL...</b></span><br>Удостоверьтесь, что у Вас установлена последняя стабильная версия OpenAL. Настоятельно рекомендуется использовать как минимум версию 0.0.8. Версия 0.0.7 имеет склонность "подвисать" на несколько секунд при освобождении загруженного контекста. В версии 0.0.6 (эта версия предустановлена в Mandrake 10 и старше) наблюдается серьёзная утечка памяти. RPM'ы с последними стабильными релизами OpenAL можно скачать с <a href='http://www.openal.org/downloads.html'>официального сайта OpenAL</a>.</div><table border=0 cellpadding=4 cellspacing=2 style='font-size:10pt;font-family:Arial,Aerial'><tr bgcolor=#708090 style='color:#E7E7E7;font-weight:bold'><td>Каталог<td width=160>Компилятор<td width=64>Автор(ы)<td>Комментарии<tr><td>TclTk<td><a href='http://www.tcl.tk/'>Tcl/Tk</a><td>*<td>Графические плееры XM-файлов.<tr bgcolor=#E7E7E7 valign=top><td>Gcc<td><a href='http://gcc.gnu.org/'>GNU C</a><td>*<td>Здесь находится графический пример использования функции Jump2Pattern, построенный на GTK. В этом примере проигрывается композитный XM, любезно предоставленный товарищем Kim (он же norki). Описание техники создания и использования подобных композиций можно найти в <a href='#5'>следующем</a> разделе.<p>Ещё здесь находится пример динамической загрузки библиотеки OpenAL, который таким образом способен запускаться и в отсутствии libopenal.so.<tr valign=top><td>Fasm<td>Flat Assembler<td>*<td>Примеры для FASM, как с использованием линкера от GNU C, так и без (OSS).<tr bgcolor=#E7E7E7 valign=top><td>Nasm<td>Netwide Assembler<td>*<td>Примеры для NASM, как с использованием линкера от GNU C, так и без (OSS).<tr><td>Gas<td>GNU Assembler<td>*<td><tr bgcolor=#E7E7E7 valign=top><td>PureBasic<td>PureBasic<td>*<td>Требуется PureBasic 3.81 или новее. Не забудьте поместить библиотеки в [PureBasic]/purelibraries/userlibraries перед компиляцией. Документация для API-функций uFMOD в PureBasic доступна в подкаталоге HELP.<p>Вы также найдёте здесь полную версию библиотеки OpenAL для PureBasic. uFMOD под OpenAL использует данную библиотеку, но Вы можете задействовать её и в сторонних проектах.<tr valign=top><td>BlitzMax<td>BlitzMax<td>*, <a href='http://flaith.free.fr/'>flaith</a><td><a href='../BlitzMax/mod/ufmod.mod/ufmod.mod/doc/commands.html'>Полная документация</a> (на английском).<p>Вы также найдёте здесь полную версию модуля OpenAL для BlitzMax. uFMOD под OpenAL использует данный модуль, но Вы можете задействовать его и в сторонних проектах.<tr bgcolor=#E7E7E7 valign=top><td>FreeBASIC<td>FreeBASIC<td>voodooattack, antarman<td>Используется визуализация товарища rel, именуемая Torus.<tr valign=top><td>FreePascal<td>FreePascal<td>*<td>Проверено на FPC версии 2.1.4.<p>Вы также найдёте здесь полную версию юнита OpenAL для FreePascal. uFMOD под OpenAL использует данный юнит, но Вы можете задействовать его и в сторонних проектах.<tr bgcolor=#E7E7E7><td colspan=4 height=2></table><span style='font-size:8pt'>* Quantum, Asterix</span><p>&nbsp;<br><a name='5'><b>Дополнительное уменьшение размера</b></a><p>Утилита <a href='#22'>Eff</a> предназначена для оптимизации и уменьшения размера библиотеки uFMOD.<p>Если Вы собираетесь включить XM статически в экзешник, можете попробовать оптимизировать сначала сам XM. Modplug Player умеет сжимать XM-композиции по схеме APDCM, но учтите, что этот тип сжатия пагубно влияет на качество звучания! Утилита <a href='#21'>XMStrip</a> перепаковывает XM файл без потери качества.<p>Если Вы уверены в корректности формата всех композиций, которые будут использованы в приложении, можете пересобрать библиотеку в режиме UNSAFE.<p>Используйте <a href='http://www.gnu.org/software/binutils/manual/html_chapter/binutils_8.html'>strip</a> и <a href='http://www.muppetlabs.com/~breadbox/software/elfkickers.html'>sstrip</a> для удаления из экзешника лишних данных, вставленных компилятором/линкером. Иногда бывает возможно полностью удалить некоторые секции не нарушая целостности экзешника.<p>Упаковщики, вроде <a href='http://upx.sf.net/'>UPX</a>, умеют ужимать экзешники. Тем не менее, для наглядности, все примеры предоставлены без сжатия!<p>Дополнительные советы по уменьшению размера исполнимого модуля можно найти в статье Браяна Рейтера (Brian Raiter): <a href='http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html'>"A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux"</a>.<p>Есть ещё один хитрый способ оптимизации размера XM-файлов, который заключается в совмещении сразу нескольких композиций в одном файле. При этом можно удалять лишние экземпляры повторяющихся инструментов, если таковые имеются, что очень заметно сказывается на размере конечного файла. Даже без оптимизации инструментов размер композитного файла должен получиться меньше суммы размеров отдельных файлов, так как заголовки всех файлов заменяются одним общим. Давайте рассмотрим пример с тремя файлами:<pre>
<b>Файл 1 :</b> XM1_HEADER P11 P12 P13     I11 I12
<b>Файл 2 :</b> XM2_HEADER P21 P22 P23 P24 I21 I22 I23 I24
<b>Файл 3 :</b> XM3_HEADER P31             I31
</pre><i><b>Пояснение:</b> XMn_HEADER - это заголовок n-ного файла. Pnm - это m-ная партитура n-ного файла. Inm - это m-ный инструмент n-ного файла.</i><p>Для начала, совместим все 3 композиции без оптимизации инструментов:<pre>
<b>Файл 4 :</b> XM4_HEADER P11 P12 P13 P21 P22 P23 P24 P31 I11 I12 I21 I22 I23 I24 I31
</pre>Представьте, что I12 очень похож или идентичен I23; I24 и I31 тоже практически одинаковы. Мы можем заставить партитуры P2n использовать I12 вместо I23, а P31 переключить на I24. Тогда мы сможем удалить I23 и I31:<pre>
<b>Файл 4 :</b> XM4_HEADER P11 P12 P13 P21 P22 P23 P24 P31 I11 I12 I21 I22 I24
</pre>Необходимо скорректировать команды зацикливания и ссылки на партитуры в композициях 2 и 3 после совмещения. Конечно, можно совмещать и большее количество композиций, но формат XM имеет ограничения на максимальное количество партитур и инструментов в файле. Все операции над XM-файлами надлежит проводить в специальном ПО - трекере. Для проигрывания композитного файла достаточно одного вызова функции uFMOD_PlaySong. Далее нужно использовать функцию uFMOD_Jump2Pattern для проигрывания отдельных композиций из общего файла в произвольной последовательности. Например, uFMOD_Jump2Pattern(3) переключится на вторую композицию, uFMOD_Jump2Pattern(7) начнёт проигрывать третью, а uFMOD_Jump2Pattern(0) вернётся обратно к первой. Точные значения индексов стартовых партитур каждой композиции после совмещения легко вычислить в уме, но можно и в трекере подсмотреть :) Gcc/OSS/ содержит реальный пример всего вышесказанного.<p>В использовании Jump2Pattern есть ещё один плюс - переключение происходит гораздо быстрее (практически моментально) чем при остановке текущей композиции и последующей загрузке новой. Можете брать на вооружение эту фишку для реализации решений, требующих максимально быстрого переключения музыкального фона.<p>&nbsp;<br><a name='6'><b>ЧаВо</b></a><p><span style='color:#008080'><b>В:</b> Библиотека uFMOD действительно бесплатна для любого использования, включая коммерческое?</span><br><b>О:</b> Да, текущая версия абсолютно бесплатна для использования в любых целях.<p><span style='color:#008080'><b>В:</b> Где бы достать композиции в формате XM?</span><br><b>О:</b> <a href='http://modarchive.org/'>The Mod Archive</a> содержит внушительных размеров архив с бесплатными трекерскими композициями в формате XM, IT, S3M и MOD. <a href='http://www.modplug.com/'>Open Modplug Tracker</a> умеет конвертировать IT, S3M и MOD в XM без потери качества. В сети много талантливых композиторов, которые бесплатно выкладывают свои работы. Не забывайте указывать соответствующие пометки об авторстве!<p><span style='color:#008080'><b>В:</b> Существует ли какая-либо связь между проектом uFMOD и разработками Firelight Technologies&#174;: FMOD и miniFMOD?</span><br><b>О:</b> На данный момент никакой связи уже нет. До 2004го года включительно проект uFMOD основывался на исходных кодах библиотеки miniFMOD. С тех пор, код uFMOD был полностью переписан, оснащён новыми функциями, оптимизирован и отлажен. Таким образом, uFMOD более не связан ни с FMOD, ни с miniFMOD.<p><span style='color:#008080'><b>В:</b> Некоторые разработчики утверждают, что их библиотеки увеличивают экзешники на N-ное количество килобайт. На сколько килобайт увеличивается размер экзешника при использовании uFMOD?</span><br><b>О:</b> Точного ответа на этот вопрос нет, так как этот размер зависит от многих факторов: используемые характеристики библиотеки (особенно при использовании утилиты Eff), основной код программы, размер XM-файла (если XM включается в образ экзешника). Размер также зависит от опций линкера. Пример Fasm/minimal занимает 4921 байт без сжатия.<p><span style='color:#008080'><b>В:</b> Где можно раздобыть официальное описание формата XM?</span><br><b>О:</b> Полного официального описания современного формата XM нет. Позвольте предложить взамен этот документ: <a href='http://sourceforge.net/project/showfiles.php?group_id=158498&package_id=234625'>"The Unofficial XM File Format Specification: FastTracker II, ADPCM and Stripped Module Subformats"</a> (только на англ.). В данном документе описаны многие тонкости работы с форматом XM, включая все нестандартные расширения, которые на данный момент поддерживает uFMOD. К тому же, из исходников ModPlug (на C++) можно почерпнуть массу полезной информации по трекерским форматам файлов.<p>&nbsp;<br><a name='7'><b>Благодарности</b></a><p>antarman, Barracuda, bogrus, chris_b, cresta, dododo, flaith, Four-F, GL#0M, norki, q_q, SofT MANiAC, S_T_A_S_, voodooattack и yoxola за помощь в устранении ошибок, предложения по улучшению библиотеки, примеры использования под разные компиляторы и всё остальное, так или иначе помогающее нам в развитии проекта.<p><a href='http://wasm.ru'>[WASM.RU]</a> и <a href='http://sf.net'>SourceForge.net</a> за поддержку и хостинг.<p>&nbsp;<br><b>Автор&#169;тво</b><p>Исходные коды uFMOD и сопровождающие утилитарные приложения &#169; 2005 - 2007 Asterix и Quantum.<br>Все права защищены.<p>Композиции:<ul><li>Minimal III &#169; 2006 - 2007 SofT MANiAC (CoolPHat).<li>BlitzXMK.XM из примера Jump2Pat &#169; 2007 Kim (он же - norki).</ul></div><table border=0 cellpadding=0 cellspacing=0 width=100%><tr bgcolor=#708090><td height=1><tr bgcolor=#E7E7E7><td height=52 style='color:#708090;font-size:10pt;font-family:Arial,Aerial' align=center>Нашли ошибку? Желаете задать вопрос разработчикам или высказать предложение по улучшению библиотеки?<br>Разрабатываете интересный проект с использованием uFMOD? Вам сюда: <a href='mailto:ufmod@users.sf.net'>ufmod@users.sf.net</a></table></body></html>